import time
import telebot
import requests
from telebot.types import ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton, InlineKeyboardMarkup, \
    InlineKeyboardButton
from settings import *
from logic import Person

bot = telebot.TeleBot(bot_token)

person_info = {}
prompt = ''


def deep_pavlov_answer(question):
    try:
        API_URL = "https://7038.deeppavlov.ai/model"
        data = {"question_raw": [question]}
        res = requests.post(API_URL, json=data).json()
        res = res[0][0]
    except:
        res = "I don't know how to help"
    return res


@bot.message_handler(commands=['help'])
def help(message):
    bot.reply_to(message,
                 '–í—ã –ø–æ–ø–∞–ª–∏ –≤ –æ—Ç–¥–µ–ª –ø–æ–º–æ—â–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É! <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–∞ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è',
                 parse_mode='HTML')


@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message,
                 '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–ª—è –Ω–∞—á–∞–ª–∞ –º–Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∑–Ω–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –í–∞—Å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å, –∫–∞–∫ –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∫–∞—Ä—å–µ—Ä—É! üìù\n–ú–Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è: —Ç–µ–∫—É—â–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –æ—â—É—â–µ–Ω–∏—è –æ—Ç —Ä–∞–±–æ—Ç—ã –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ—Ç–∞–ª–∏ –ø–æ –∂–µ–ª–∞–Ω–∏—é.')

    keyboard = InlineKeyboardMarkup()
    b1 = InlineKeyboardButton(text="–î–∞", callback_data='yes')
    b2 = InlineKeyboardButton(text="–ù–µ—Ç", callback_data='no')
    keyboard.add(b1)
    keyboard.add(b2)
    bot.send_message(
        message.chat.id, '–ì–æ—Ç–æ–≤—ã –ª–∏ –í—ã —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã?', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    if call.data == "yes":
        bot.send_message(call.message.chat.id, '–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º üî•\n–ö–∞–∫–∞—è —É –í–∞—Å —Å–µ–π—á–∞—Å –¥–æ–ª–∂–Ω–æ—Å—Ç—å üíº?')
        bot.register_next_step_handler(call.message, job_handler)
    elif call.data == "no":
        bot.send_message(call.message.chat.id, "–ë–µ–∑ –ø—Ä–æ–±–ª–µ–º, —è –±—É–¥—É –∂–¥–∞—Ç—å –í–∞—Å.")
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.delete_message(call.message.chat.id, call.message.message_id - 1)


def job_handler(message):
    bot.reply_to(message, '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è! –ü–µ—Ä–µ–π–¥–µ–º –∫–æ –≤—Ç–æ—Ä–æ–º—É –≤–æ–ø—Ä–æ—Å—É.')
    person_info[message.chat.id] = {"job": message.text}
    bot.send_message(message.chat.id,
                     '–ö–∞–∫–∏–µ —É –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—ã? (—Ä–∏—Å–æ–≤–∞–Ω–∏–µ, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, —á–µ—Ä—á–µ–Ω–∏–µ)\n–ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ö–æ–±–±–∏.', )
    bot.register_next_step_handler(message, interests_handler)


def interests_handler(message):
    bot.reply_to(message, '–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ–π–¥–µ–º –∫ —Ç—Ä–µ—Ç—å–µ–º—É –≤–æ–ø—Ä–æ—Å—É.')
    person_info[message.chat.id]["interests"] = message.text
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    itembtn1 = KeyboardButton('–•–æ—Ä–æ—à–∏–µ')
    itembtn2 = KeyboardButton('–ü–ª–æ—Ö–∏–µ')
    itembtn3 = KeyboardButton('–ü–æ-—Ä–∞–∑–Ω–æ–º—É')
    markup.add(itembtn1, itembtn2, itembtn3)
    bot.send_message(message.chat.id,
                     '–ö–∞–∫–∏–µ —É –í–∞—Å –æ—â—É—â–µ–Ω–∏–µ –æ—Ç —Ä–∞–±–æ—Ç—ã –∏ –≤—Å–µ, —á—Ç–æ —Å –Ω–µ–π —Å–≤—è–∑–∞–Ω–æ? (—Ö–æ—Ä–æ—à–∏–µ, –ø–ª–æ—Ö–∏–µ, –ø–æ-—Ä–∞–∑–Ω–æ–º—É).',
                     reply_markup=markup)
    bot.register_next_step_handler(message, feelings_handler)


def feelings_handler(message):
    bot.reply_to(message,
                 '–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ–π–¥–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –≤–æ–ø—Ä–æ—Å—É. –ö–∞–∫–∏–µ —É –í–∞—Å –º—ã—Å–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã üßò?',
                 reply_markup=ReplyKeyboardRemove())
    person_info[message.chat.id]["feelings"] = message.text
    bot.register_next_step_handler(message, general_info_handler)


def general_info_handler(message):
    global prompt
    person_info[message.chat.id]["general"] = message.text
    person_data = person_info.pop(message.chat.id)
    person.info(message.from_user.id, person_data["job"], person_data["interests"], person_data["feelings"],
                person_data["general"])
    prompt = f'–ú–æ—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è: {person_data["job"]}. \n–ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {person_data["interests"]}. \n–ú–æ–∏ –æ—â—É—â–µ–Ω–∏–µ –æ—Ç —Ä–∞–±–æ—Ç—ã: {person_data["feelings"]}. \n–ú–æ–∏ –º—ã—Å–ª–∏ –≤–æ –≤—Ä–µ–º—ã —Ä–∞–±–æ—Ç—ã: {person_data["general"]}. \n–Ø —Ö–æ—á—É —Å–º–µ–Ω–∏—Ç—å —Ä–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ö–∞–∫–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–ª–∏ —Ö–æ–±–±–∏ –º–æ–∂–µ—à—å –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å?'
    sent_message = bot.reply_to(message,
                                '–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n–ü—Ä–∏—Å—Ç—É–ø–∏–ª –∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –í–∞—Å')

    loading_text = '–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n–ü—Ä–∏—Å—Ç—É–ø–∏–ª –∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –í–∞—Å'
    for _ in range(5):
        for dots in range(3, 0, -1):
            bot.edit_message_text(chat_id=sent_message.chat.id, message_id=sent_message.message_id,
                                  text=loading_text + "." * dots)
            time.sleep(0.2)
    bot.edit_message_text(chat_id=sent_message.chat.id, message_id=sent_message.message_id,
                          text='–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')

    bot.register_next_step_handler(message, ai_answer)


def ai_answer(message):
    global prompt
    result = deep_pavlov_answer('who is the first president of the US?')
    bot.send_message(message.chat.id, result)
    bot.send_message(message.chat.id, prompt)


if __name__ == '__main__':
    person = Person('database.db')
    person.create_tables()
    bot.infinity_polling()
