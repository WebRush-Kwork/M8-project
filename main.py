import time
import os
import telebot
from g4f.client import Client
from telebot.types import ReplyKeyboardRemove, InlineKeyboardMarkup, \
    InlineKeyboardButton
from deep_translator import GoogleTranslator
from logic import Person
from settings import *

bot = telebot.TeleBot(bot_token)

person_info = {}
prompt = ''


def ai_answer(question):
    client = Client()
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": question}],
    )
    return response.choices[0].message.content


@bot.message_handler(commands=['help'])
def help(message):
    bot.reply_to(message,
                 '–í—ã –ø–æ–ø–∞–ª–∏ –≤ –æ—Ç–¥–µ–ª –ø–æ–º–æ—â–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É! –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–∞ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è üìù\n/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –∑–∞–Ω–µ—Å–µ–Ω–∞ ‚ÑπÔ∏è\n/help - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞, –Ω–∞–≤–∏–≥–∞—Ü–∏—è üß≠')


@bot.message_handler(commands=['start'])
def start(message):
    if os.path.exists('database.db'):
        keyboard1 = InlineKeyboardMarkup()
        b3 = InlineKeyboardButton(text="–î–∞", callback_data='yes-start')
        b4 = InlineKeyboardButton(text="–ù–µ—Ç", callback_data='no-start')
        keyboard1.add(b3)
        keyboard1.add(b4)
        bot.reply_to(message, "–í—ã —É–∂–µ –≤–≤–æ–¥–∏–ª–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ. –•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?", reply_markup=keyboard1)
    else:
        person.create_tables()
        bot.reply_to(message,
                     '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–ª—è –Ω–∞—á–∞–ª–∞ –º–Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∑–Ω–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –í–∞—Å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å, –∫–∞–∫ –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∫–∞—Ä—å–µ—Ä—É! üåéüìù\n\n–ú–Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è: —Ç–µ–∫—É—â–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –æ—â—É—â–µ–Ω–∏—è –æ—Ç —Ä–∞–±–æ—Ç—ã –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ—Ç–∞–ª–∏ –ø–æ –∂–µ–ª–∞–Ω–∏—é.')

        keyboard = InlineKeyboardMarkup()
        b1 = InlineKeyboardButton(text="–î–∞", callback_data='yes')
        b2 = InlineKeyboardButton(text="–ù–µ—Ç", callback_data='no')
        keyboard.add(b1)
        keyboard.add(b2)
        time.sleep(1)
        bot.send_message(
            message.chat.id, '–ì–æ—Ç–æ–≤—ã –ª–∏ –í—ã —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã?', reply_markup=keyboard)


def job_handler(message):
    bot.delete_message(message.chat.id, message.message_id)
    bot.delete_message(message.chat.id, message.message_id - 1)
    bot.send_message(message.chat.id,
                     '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è! –ü–µ—Ä–µ–π–¥–µ–º –∫–æ –≤—Ç–æ—Ä–æ–º—É –≤–æ–ø—Ä–æ—Å—É. \n–ö–∞–∫–∏–µ —É –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—ã üé®üé§? –ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ö–æ–±–±–∏ üî¢')
    person_info[message.chat.id] = {"job": message.text}
    bot.register_next_step_handler(message, interests_handler)


def interests_handler(message):
    bot.delete_message(message.chat.id, message.message_id)
    bot.delete_message(message.chat.id, message.message_id - 1)

    person_info[message.chat.id]["interests"] = message.text
    markup = InlineKeyboardMarkup(row_width=3)
    itembtn1 = InlineKeyboardButton('üëç', callback_data='good')
    itembtn2 = InlineKeyboardButton('üëé', callback_data='bad')
    itembtn3 = InlineKeyboardButton('ü§∑‚Äç', callback_data='mixed')
    markup.add(itembtn1, itembtn2, itembtn3)
    bot.send_message(message.chat.id,
                     '–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ–π–¥–µ–º –∫ —Ç—Ä–µ—Ç—å–µ–º—É –≤–æ–ø—Ä–æ—Å—É. \n–ö–∞–∫–∏–µ —É –í–∞—Å –æ—â—É—â–µ–Ω–∏–µ –æ—Ç —Ä–∞–±–æ—Ç—ã –∏ –≤—Å–µ, —á—Ç–æ —Å –Ω–µ–π —Å–≤—è–∑–∞–Ω–æ üßê?',
                     reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data in ["yes-start", "no-start"])
def handle_yes_no_start_callback(call):
    if call.data == "yes-start":
        os.remove('database.db')
        start(call.message)
        bot.delete_message(call.message.chat.id, call.message.message_id)
    elif call.data == "no-start":
        bot.send_message(call.message.chat.id, '–ë–µ–∑ –ø—Ä–æ–±–ª–µ–º, —è –±—É–¥—É –∂–¥–∞—Ç—å –í–∞—Å üïí')
        time.sleep(1)
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.delete_message(call.message.chat.id, call.message.message_id - 1)
        return


@bot.callback_query_handler(func=lambda call: call.data in ["yes", "no"])
def handle_yes_no_callback(call):
    if call.data == "yes":
        bot.reply_to(call.message, '–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º üî•\n–ö–∞–∫–∞—è —É –í–∞—Å —Å–µ–π—á–∞—Å –ø—Ä–æ—Ñ–µ—Å—Å–∏—è üíº?')
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.delete_message(call.message.chat.id, call.message.message_id - 1)
        bot.register_next_step_handler(call.message, job_handler)
    elif call.data == "no":
        bot.send_message(call.message.chat.id, "–ë–µ–∑ –ø—Ä–æ–±–ª–µ–º, —è –±—É–¥—É –∂–¥–∞—Ç—å –í–∞—Å üïí")
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.delete_message(call.message.chat.id, call.message.message_id - 1)


@bot.callback_query_handler(func=lambda call: call.data in ['good', 'bad', 'mixed'])
def handle_feelings_callback(call):
    if call.data == 'good':
        person_info[call.message.chat.id]["feelings"] = '–•–æ—Ä–æ—à–∏–µ'
        bot.delete_message(call.message.chat.id, call.message.message_id)
        feelings_handler(call.message)
    elif call.data == 'bad':
        person_info[call.message.chat.id]["feelings"] = '–ü–ª–æ—Ö–∏–µ'
        bot.delete_message(call.message.chat.id, call.message.message_id)
        feelings_handler(call.message)
    elif call.data == 'mixed':
        person_info[call.message.chat.id]["feelings"] = '–ü–æ-—Ä–∞–∑–Ω–æ–º—É'
        bot.delete_message(call.message.chat.id, call.message.message_id)
        feelings_handler(call.message)


def feelings_handler(message):
    bot.send_message(message.chat.id,
                     '–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ–π–¥–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –≤–æ–ø—Ä–æ—Å—É. \n–ö–∞–∫–∏–µ –º—ã—Å–ª–∏ –í–∞—Å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã üßò?',
                     reply_markup=ReplyKeyboardRemove())
    bot.register_next_step_handler(message, lambda msg: general_info_handler(msg))


def general_info_handler(message):
    global prompt
    bot.delete_message(message.chat.id, message.message_id)
    bot.delete_message(message.chat.id, message.message_id - 1)
    person_info[message.chat.id]["general"] = message.text
    person_data = person_info.pop(message.chat.id)
    person.info(message.from_user.id, person_data["job"], person_data["interests"], person_data["feelings"],
                person_data["general"])
    prompt = f'–ú–æ—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è: {person_data["job"]}. \n–ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {person_data["interests"]}. \n–ú–æ–∏ –æ—â—É—â–µ–Ω–∏–µ –æ—Ç —Ä–∞–±–æ—Ç—ã: {person_data["feelings"]}. \n–ú–æ–∏ –º—ã—Å–ª–∏ –≤–æ –≤—Ä–µ–º—ã —Ä–∞–±–æ—Ç—ã: {person_data["general"]}. \n–Ø —Ö–æ—á—É —Å–º–µ–Ω–∏—Ç—å —Ä–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ö–∞–∫–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–ª–∏ —Ö–æ–±–±–∏ –º–æ–∂–µ—à—å –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å?'
    sent_message = bot.send_message(message.chat.id,
                                    '–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n–ü—Ä–∏—Å—Ç—É–ø–∏–ª –∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –í–∞—Å')

    loading_text = '–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n–ü—Ä–∏—Å—Ç—É–ø–∏–ª –∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –í–∞—Å'
    for _ in range(5):
        for dots in range(3, 0, -1):
            bot.edit_message_text(chat_id=sent_message.chat.id, message_id=sent_message.message_id,
                                  text=loading_text + "." * dots)
            time.sleep(0.3)

    translated = GoogleTranslator(source='auto', target='en').translate(prompt)
    ai_eng = ai_answer(translated)
    ai_rus = GoogleTranslator(source='auto', target='ru').translate(ai_eng)

    bot.edit_message_text(chat_id=sent_message.chat.id, message_id=sent_message.message_id, text=ai_rus)


@bot.message_handler(commands=['info'])
def show_info(message):
    bot.send_message(message.chat.id, person.get_person_info(message.chat.id))


if __name__ == '__main__':
    person = Person('database.db')
    bot.infinity_polling()
